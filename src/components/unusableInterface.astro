---
// UnusableHIMansion.astro
---

<div class="unusable_HI_Mansion_container relative">
  <!-- 画像 -->
  <img
    src="/unusableInterfaceImage.png"
    class="hero-overlay cursor-pointer hover:shadow-2xl"
    alt="使いにくインターフェースの館"
    id="mansionImage"
  />

  <!-- 重ねて表示するボタン -->
  <button
    id="escapeButton"
    class="absolute left-1/3 top-3/4 flex h-1/6 w-1/3 -translate-x-1/2 -translate-y-1/2 transform cursor-pointer items-center justify-center rounded-md border-2 border-none border-red-800 bg-gradient-to-b from-red-800 to-red-600 text-center font-serif text-2xl text-red-400 shadow-lg hover:bg-gradient-to-b hover:from-red-800 hover:to-red-500 hover:text-red-400 hover:shadow-lg"
  >
    はじめる
  </button>

  <!-- テキスト -->
  <p class="absolute bottom-0 right-0 text-right text-gray-500">
    <span class="text-gray-300">※&nbsp;</span>
    画像のどこをクリックしても、開始できます。
  </p>
</div>

<script>
  // 新しいウィンドウを開く関数
  function openNewWindow(): void {
    const windowFeatures = 'width=960,height=540';
    const url = './unusable_HI_Mansion/';
    window.open(url, '_blank', windowFeatures);
  }

  // DOM要素の取得
  const button = document.getElementById('escapeButton') as HTMLButtonElement;
  const container = document.querySelector(
    '.unusable_HI_Mansion_container'
  ) as HTMLElement;
  const mansionImage = document.getElementById(
    'mansionImage'
  ) as HTMLImageElement;

  if (button && container && mansionImage) {
    // 初期位置を保存
    let initialLeft: number;
    let initialTop: number;

    // ページ読み込み完了後に初期化
    window.addEventListener('load', () => {
      initialLeft = button.offsetLeft;
      initialTop = button.offsetTop;

      // 画像クリックイベント
      mansionImage.addEventListener('click', openNewWindow);

      // ボタンクリックイベント
      button.addEventListener('click', openNewWindow);

      // マウス移動でボタンが逃げる機能
      container.addEventListener('mousemove', (event: MouseEvent) => {
        const buttonRect = button.getBoundingClientRect();
        const buttonCenterX = buttonRect.left + buttonRect.width / 2;
        const buttonCenterY = buttonRect.top + buttonRect.height / 2;

        // マウスカーソルとボタンの中心の差分を計算
        const diffX = event.clientX - buttonCenterX;
        const diffY = event.clientY - buttonCenterY;

        // 距離が近いほどボタンが大きく動く
        const distance = Math.sqrt(diffX * diffX + diffY * diffY);
        const maxDistance = 300; // 逃げる効果の範囲
        const moveMultiplier = Math.min(
          50,
          maxDistance / Math.max(1, distance)
        );

        // マウスが一定距離内にある場合にボタンを動かす
        if (distance < maxDistance) {
          const moveX = (5 * diffX * -moveMultiplier) / distance;
          const moveY = (5 * diffY * -moveMultiplier) / distance;

          const containerRect = container.getBoundingClientRect();
          const newLeft = Math.max(
            0,
            Math.min(
              containerRect.width - button.offsetWidth,
              button.offsetLeft + moveX
            )
          );
          const newTop = Math.max(
            0,
            Math.min(
              containerRect.height - button.offsetHeight,
              button.offsetTop + moveY
            )
          );

          button.style.left = `${newLeft}px`;
          button.style.top = `${newTop}px`;
        }
      });

      // マウスが画像の外に出たらボタンを中央に戻す
      container.addEventListener('mouseleave', () => {
        button.style.left = `${initialLeft}px`;
        button.style.top = `${initialTop}px`;
      });
    });
  }
</script>

<style>
  .unusable_HI_Mansion_container {
    /* コンテナのスタイルが必要な場合はここに追加 */
    min-height: 400px; /* 例：最小高さを設定 */
  }

  .hero-overlay {
    transition: box-shadow 0.3s ease;
  }

  #escapeButton {
    transition: all 0.2s ease;
  }
</style>
